#!/usr/bin/env python3

import requests
from bs4 import BeautifulSoup
from getpass import getpass
import html
import sys
import re
import os
import platform
from enert import *

def print_gist(public, description, filenames, url, src_dir, user):
    gist_hash = url.replace("https://api.github.com/gists/", "")
    gist_hash = gist_hash.replace("https://gist.github.com/" + user + "/", "")
    gist_hash = gist_hash.replace("https://gist.github.com/", "")
    print(gist_hash, end=" ")
    if public:
        print("[P] ", end="")
    else:
        print("[S] ", end="")
    print(description, end=" ")
    print("(", end="")
    for (i, filename) in enumerate(filenames):
        if i != 0:
            print(", ", end="")
        print(filename, end="")
    print(")")
    if args.all_clone:
        clone(gist_hash, src_dir, user)

user_token = open(os.environ["GIT_TOKEN_FILE"], "r").readlines()[0]
re_user = re.compile("([^:]+)")
re_token = re.compile(":(.*)")

user = re_user.findall(user_token)[0]
token = re_token.findall(user_token)[0]

os.chdir(os.environ["HOME"])

usage = "gists <[options]...>"

argv = sys.argv
argc = len(argv)

parser = mkparser(usage)
parser.add_argument("-d", "--dgrep", metavar="REGEX_FOR_DESCRIPTION")
parser.add_argument("-f", "--fgrep", metavar="REGEX_FOR_FILENAME")
parser.add_argument("-p", "--public", action="store_true")
parser.add_argument("-s", "--secret", action="store_true")
parser.add_argument("-c", "--clone", metavar="GIST_ID")
parser.add_argument("-a", "--all-clone", action="store_true")
parser.add_argument("-P", "--push-public", metavar="FILE_NAME [-d DESCRIPTION]")
parser.add_argument("-S", "--push-secret", metavar="FILE_NAME [-d DESCRIPTION]")
parser.add_argument("-F", "--force", action="store_true", help="overwrite if a directory already exists")
parser.add_argument("-u", "--use-ssh", action="store_true")
parser.add_argument("-r", "--rename", action="store_true")

if argc > 1:
    args = parser.parse_args(argv[1:])
else:
    args = parser.parse_args([])

if args.help:
    parser.print_help()
    exit()

def clone(gist_hash, src_dir, user):
    r_description = re.compile(r"[^ ]+ \[[PS]\] (.*) \(.*\)")
    line = Shell("gists | rg %s" % gist_hash).readlines()[0][0]
    description = r_description.findall(line)[0] 
    if description[-1:] == r" ":
        description = description[:-1]
    description_org = description
    description = description.replace(" ", r"\ ")
    description = description.replace("(", r"\(")
    description = description.replace(")", r"\)")
    if args.rename:
        dirname = description
    else:
        dirname = gist_hash
    path = f"{src_dir}/gist.github.com/{user}/{dirname}"
    f = File(path)
    if not f.exist() or args.force:
        if f.exist() and args.force:
            os.chdir(f"{src_dir}/gist.github.com/{user}/{dirname}")
            status = Shell(f"git status --short").readlines()[0]
            log = Shell(f"git log --oneline --decorate=short | head -1 | rg origin | rg master").readlines()[0]
            os.chdir(os.environ["HOME"])
            if status == [] and log != []:
                cmd = f"rm -rf {src_dir}/gist.github.com/{user}/{dirname}"
                Shell(cmd).call()
            else:
                print(f"You have something to do: {dirname}")
                Shell(f"echo {dirname} >> {src_dir}/gist.github.com/{user}/somethingToDo.txt").call()
                return
        if args.use_ssh:
            f = File(f"{src_dir}/gist.github.com/{user}")
            if not f.exist():
                Shell(f"mkdir {src_dir}/gist.github.com/{user}").call()
            Shell("ghq get git@gist.github.com:%s" % gist_hash).call()
            Shell(f"mv {src_dir}/gist.github.com/{gist_hash} {src_dir}/gist.github.com/{user}/{gist_hash}").call()
        else:
            Shell("ghq get https://gist.github.com/%s/%s" % (user, gist_hash)).call()
        if args.rename:
            cmd = f"mv {src_dir}/gist.github.com/{user}/{gist_hash} {src_dir}/gist.github.com/{user}/{dirname}"
            Shell(cmd).call()
            print(f"move to {src_dir}/gist.github.com/{user}/{dirname}")
    else:
        print(f.abspath + ": Already exists")

def push(filename, mode, description=""):
    gist_tool = Shell("which gist").readlines()[0]
    if gist_tool == []:
        print("please install https://github.com/defunkt/gist")
        exit()
    if mode == "secret":
        opt = "--private"
    elif mode == "public":
        opt = "--no-private"
    if description != "":
        description = f"-d '{description}'"
    Shell(f"gist {opt} {description} {filename}").call()

def use_ssh():
    origin = Shell("git remote -v").readlines()[0][0]
    r_ssh = re.compile(r"git@gist.github.com")
    ssh = r_ssh.findall(origin)
    if ssh != []:
        return
    r_gist_id = re.compile(r"([0-9a-f]{5}[0-9a-f]*)")
    gist_id = r_gist_id.findall(origin)[0]
    Shell("git remote remove origin").call()
    Shell(f"git remote add origin git@gist.github.com:{gist_id}").call()
    Shell("git push --set-upstream origin master").call()

src_dir = Shell("git config --global ghq.root").readlines()[0][0]
pf = platform.system()
if pf == 'Linux':
    src_dir = src_dir.replace("~", f"/home/{user}")
else:
    src_dir = src_dir.replace("~", f"/Users/{user}")

def check_somethingToDo(src_dir, user):
    f_somethingToDo = File(f"{src_dir}/gist.github.com/{user}/somethingToDo.txt")
    if f_somethingToDo.exist():
        print(f"warning: exists: {src_dir}/gist.github.com/{user}/somethingToDo.txt")
        exit()

def warn_somethingToDo(src_dir, user):
    f_somethingToDo = File(f"{src_dir}/gist.github.com/{user}/somethingToDo.txt")
    if f_somethingToDo.exist():
        print(red(f"warning: Look at this file: {src_dir}/gist.github.com/{user}/somethingToDo.txt", "bold"))
        exit()

if args.force:
    check_somethingToDo(src_dir, user)

if not args.clone and not args.all_clone and args.use_ssh:
    use_ssh()
    exit()

if args.clone:
    clone(args.clone, src_dir, user)
    warn_somethingToDo(src_dir, user)
    exit()

if args.dgrep:
    push_description = args.dgrep
else:
    push_description = ""

if args.push_public:
    push(args.push_public, "public", push_description);
    exit()

if args.push_secret:
    push(args.push_secret, "secret", push_description);
    exit()

if args.dgrep:
    re_dgrep = re.compile(args.dgrep)

if args.fgrep:
    re_fgrep = re.compile(args.fgrep)

def login(user, password):
    payload = {
            'login': user,
            'password': password
    }
    s = requests.Session()
    r = s.get('https://github.com/login')
    soup = BeautifulSoup(r.text, "html.parser")
    auth_token = soup.find(attrs={'name': 'authenticity_token'}).get('value')
    payload['authenticity_token'] = auth_token
    #payload['utf8'] = 'âœ“'
    #payload['required_field_bdbf'] = ''
    #webauthn = soup.find(attrs={'name': 'webauthn-support'}).get('value')
    #payload['webauthn-support'] = 'supported' #webauthn
    #timestamp = soup.find(attrs={'name': 'timestamp'}).get('value')
    #payload['timestamp'] = timestamp
    #timestamp_secret = soup.find(attrs={'name': 'timestamp_secret'}).get('value')
    #payload['timestamp_secret'] = timestamp_secret
    s.post('https://github.com/session', data=payload)
    return s

# Use scraping
def main():
    user = input('userid: ')
    password = getpass('password: ')
    s = login(user, password)
    i = 0
    while True:
        i = i + 1
        r = s.get('https://gist.github.com/search?utf8=%E2%9C%93&q=user%3Amiyagaw61+knowledge+linux&p=' + str(i))
        soup = BeautifulSoup(r.text, "html.parser")
        h3 = soup.find('h3')
        if h3.text != 'Search cheat sheet':
            break
        targets = soup.find_all(attrs={'class': 'css-truncate-target'})
        gists = soup.find_all(class_='gist-snippet-meta d-inline-block width-full')
        for gist in gists:
            spans = gist.find_all("span")
            span = spans[0]
            description = gist.find("span", class_="f6 text-gray")
            if description == None:
                description = ""
            else:
                description = description.text
                description = description.strip()
            a = span.find_all('a')[1]
            public = True
            label = span.span
            if label != None:
                public = False
            strong = a.strong
            url = a.attrs['href']
            url = "https://gist.github.com" + url
            filename = strong.text
            filenames = [filename]
            if args.public:
                if not public:
                    continue
            elif args.secret:
                if public:
                    continue
            if args.dgrep:
                if re_dgrep.search(description):
                    print_gist(public, description, filenames, url, src_dir, user)
                    continue
            if args.fgrep:
                for filename in filenames:
                    if not re_fgrep.search(filename):
                        continue
                    else:
                        print_gist(public, description, filenames, url, src_dir, user)
                        break
                continue
            if not(args.dgrep) and not(args.fgrep):
                print_gist(public, description, filenames, url, src_dir, user)
        if args.force:
            warn_somethingToDo(src_dir, user)

# Use API
def old_main():
    res = requests.get("https://api.github.com/gists", auth=(user, token))
    gists = res.json()
    for gist in gists:
        public = gist["public"]
        if args.public:
            if not public:
                continue
        elif args.secret:
            if public:
                continue
        description = gist["description"]
        filenames = gist["files"].keys()
        url = gist["url"]
        if args.dgrep:
            if re_dgrep.search(description):
                print_gist(public, description, filenames, url, src_dir, user)
                continue
        if args.fgrep:
            for filename in filenames:
                if not re_fgrep.search(filename):
                    continue
                else:
                    print_gist(public, description, filenames, url, src_dir, user)
                    break
            continue
        if not(args.dgrep) and not(args.fgrep):
            print_gist(public, description, filenames, url, src_dir, user)

    if args.force:
        warn_somethingToDo(src_dir, user)

main()
