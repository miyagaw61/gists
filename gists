#!/usr/bin/env python3

import requests
import sys
import re
import os
from enert import *

def print_gist(public, description, filenames, url, src_dir, user):
    url = url.replace("https://api.github.com/gists/", "")
    print(url, end=" ")
    if public:
        print("[P] ", end="")
    else:
        print("[S] ", end="")
    print(description, end=" ")
    print("(", end="")
    for (i, filename) in enumerate(filenames):
        if i != 0:
            print(", ", end="")
        print(filename, end="")
    print(")")
    if args.all_clone:
        clone(url, src_dir, user)

user_token = open(os.environ["GIT_TOKEN_FILE"], "r").readlines()[0]
re_user = re.compile("([^:]+)")
re_token = re.compile(":(.*)")

user = re_user.findall(user_token)[0]
token = re_token.findall(user_token)[0]

pwd = os.getcwd()

usage = "gists <[options]...>"

argv = sys.argv
argc = len(argv)

parser = mkparser(usage)
parser.add_argument("-d", "--dgrep", metavar="REGEX_FOR_DESCRIPTION")
parser.add_argument("-f", "--fgrep", metavar="REGEX_FOR_FILENAME")
parser.add_argument("-p", "--public", action="store_true")
parser.add_argument("-s", "--secret", action="store_true")
parser.add_argument("-c", "--clone", metavar="GIST_ID")
parser.add_argument("-a", "--all-clone", action="store_true")
parser.add_argument("-P", "--push-public", metavar="FILE_NAME [-d DESCRIPTION]")
parser.add_argument("-S", "--push-secret", metavar="FILE_NAME [-d DESCRIPTION]")
parser.add_argument("-F", "--force", action="store_true", help="overwrite if a directory already exists")
parser.add_argument("-u", "--use-ssh", action="store_true")
parser.add_argument("-r", "--rename", action="store_true")

if argc > 1:
    args = parser.parse_args(argv[1:])
else:
    args = parser.parse_args([])

if args.help:
    parser.print_help()
    exit()

def clone(gist_hash, src_dir, user):
    r_description = re.compile(r"[^ ]+ \[[PS]\] (.*) \(.*\)")
    line = Shell("gists | rg %s" % gist_hash).readlines()[0][0]
    description = r_description.findall(line)[0] 
    if description[-1:] == r" ":
        description = description[:-1]
    description_org = description
    description = description.replace(" ", r"\ ")
    description = description.replace("(", r"\(")
    description = description.replace(")", r"\)")
    if args.rename:
        dirname = description
    else:
        dirname = gist_hash
    path = f"{src_dir}/gist.github.com/{user}/{dirname}"
    f = File(path)
    if not f.exist() or args.force:
        if args.force:
            status = Shell(f"cd {src_dir}/gist.github.com/{user}/{dirname}; git status --short").readlines()[0]
            log = Shell(f"cd {src_dir}/gist.github.com/{user}/{dirname}; git log --oneline --decorate=short | head -1 | rg origin | rg master").readlines()[0]
            if status == [] and log != []:
                cmd = f"rm -rf {src_dir}/gist.github.com/{user}/{dirname}"
                Shell(cmd).call()
            else:
                print(f"You have something to do: {dirname}")
                Shell(f"echo {dirname} >> {src_dir}/gist.github.com/{user}/somethingToDo.txt").call()
                return
        if args.use_ssh:
            Shell("ghq get git@gist.github.com:%s" % gist_hash).call()
            Shell(f"mv {src_dir}/gist.github.com/{gist_hash} {src_dir}/gist.github.com/{user}/{gist_hash}").call()
        else:
            Shell("ghq get https://gist.github.com/%s/%s" % (user, gist_hash)).call()
        if args.rename:
            cmd = f"mv {src_dir}/gist.github.com/{user}/{gist_hash} {src_dir}/gist.github.com/{user}/{dirname}"
            Shell(cmd).call()
        print(f"move to {src_dir}/gist.github.com/{user}/{dirname}")
    else:
        print(f.abspath + ": Already exists")

def push(filename, mode, description=""):
    gist_tool = Shell("which gist").readlines()[0]
    if gist_tool == []:
        print("please install https://github.com/defunkt/gist")
        exit()
    if mode == "secret":
        opt = "--private"
    elif mode == "public":
        opt = "--no-private"
    if description != "":
        description = f"-d '{description}'"
    Shell(f"gist {opt} {description} {filename}").call()

def use_ssh():
    origin = Shell("git remote -v").readlines()[0][0]
    r_ssh = re.compile(r"git@gist.github.com")
    ssh = r_ssh.findall(origin)
    if ssh != []:
        return
    r_gist_id = re.compile(r"([0-9a-f]{5}[0-9a-f]*)")
    gist_id = r_gist_id.findall(origin)[0]
    Shell("git remote remove origin").call()
    Shell(f"git remote add origin git@gist.github.com:{gist_id}").call()
    Shell("git push --set-upstream origin master").call()

src_dir = Shell("git config --global ghq.root").readlines()[0][0]
src_dir = src_dir.replace("~", f"/home/{user}")

def check_somethingToDo(src_dir, user):
    f_somethingToDo = File(f"{src_dir}/gist.github.com/{user}/somethingToDo.txt")
    if f_somethingToDo.exist():
        print(f"warning: exists: {src_dir}/gist.github.com/{user}/somethingToDo.txt")
        exit()

def warn_somethingToDo(src_dir, user):
    f_somethingToDo = File(f"{src_dir}/gist.github.com/{user}/somethingToDo.txt")
    if f_somethingToDo.exist():
        print(red(f"warning: Look at this file: {src_dir}/gist.github.com/{user}/somethingToDo.txt", "bold"))
        exit()

check_somethingToDo(src_dir, user)

if not args.clone and not args.all_clone and args.use_ssh:
    use_ssh()
    exit()

if args.clone:
    clone(args.clone, src_dir, user)
    warn_somethingToDo(src_dir, user)
    exit()

if args.dgrep:
    push_description = args.dgrep
else:
    push_description = ""

if args.push_public:
    push(args.push_public, "public", push_description);
    exit()

if args.push_secret:
    push(args.push_secret, "secret", push_description);
    exit()

if args.dgrep:
    re_dgrep = re.compile(args.dgrep)

if args.fgrep:
    re_fgrep = re.compile(args.fgrep)

res = requests.get("https://api.github.com/gists", auth=(user, token))
gists = res.json()
for gist in gists:
    public = gist["public"]
    if args.public:
        if not public:
            continue
    elif args.secret:
        if public:
            continue
    description = gist["description"]
    filenames = gist["files"].keys()
    url = gist["url"]
    if args.dgrep:
        if re_dgrep.search(description):
            print_gist(public, description, filenames, url, src_dir, user)
            continue
    if args.fgrep:
        for filename in filenames:
            if not re_fgrep.search(filename):
                continue
            else:
                print_gist(public, description, filenames, url, src_dir, user)
                break
        continue
    if not(args.dgrep) and not(args.fgrep):
        print_gist(public, description, filenames, url, src_dir, user)
warn_somethingToDo(src_dir, user)
