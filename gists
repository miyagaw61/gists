#!/usr/bin/env python3

import requests
import sys
import re
import os
from enert import *

def print_gist(public, description, filenames, url, user):
    url = url.replace("https://api.github.com/gists/", "")
    print(url, end=" ")
    if public:
        print("[P] ", end="")
    else:
        print("[S] ", end="")
    print(description, end=" ")
    print("(", end="")
    for (i, filename) in enumerate(filenames):
        if i != 0:
            print(", ", end="")
        print(filename, end="")
    print(")")
    if args.all_clone:
        clone(url, user)

user_token = open(os.environ["GIT_TOKEN_FILE"], "r").readlines()[0]
re_user = re.compile("([^:]+)")
re_token = re.compile(":(.*)")

user = re_user.findall(user_token)[0]
token = re_token.findall(user_token)[0]

pwd = os.getcwd()

usage = "gists <[options]...>"

argv = sys.argv
argc = len(argv)

parser = mkparser(usage)
parser.add_argument("-d", "--dgrep", metavar="REGEX_FOR_DESCRIPTION")
parser.add_argument("-f", "--fgrep", metavar="REGEX_FOR_FILENAME")
parser.add_argument("-p", "--public", action="store_true")
parser.add_argument("-s", "--secret", action="store_true")
parser.add_argument("-c", "--clone", metavar="GIST_ID")
parser.add_argument("-a", "--all-clone", action="store_true")
parser.add_argument("-P", "--push-public", metavar="FILE_NAME [-d DESCRIPTION]")
parser.add_argument("-S", "--push-secret", metavar="FILE_NAME [-d DESCRIPTION]")

if argc > 1:
    args = parser.parse_args(argv[1:])
else:
    args = parser.parse_args([])

if args.help:
    parser.print_help()
    exit()

def clone(gist_hash, user):
    r_description = re.compile(r"[^ ]+ \[[PS]\] (.*) \(.*\)")
    line = Shell("gists | rg %s" % gist_hash).readlines()[0][0]
    description = r_description.findall(line)[0] 
    if description[-1:] == r" ":
        description = description[:-1]
    description_org = description
    description = description.replace(" ", r"\ ")
    description = description.replace("(", r"\(")
    description = description.replace(")", r"\)")
    src_dir = Shell("git config --global ghq.root").readlines()[0][0]
    path = f"{src_dir}/gist.github.com/{user}/{description_org}"
    path = path.replace("~", f"/home/{user}")
    f = File(path)
    if not f.exist():
        Shell("ghq get https://gist.github.com/%s/%s" % (user, gist_hash)).call()
        cmd = f"mv {src_dir}/gist.github.com/{user}/{gist_hash} {src_dir}/gist.github.com/{user}/{description}"
        Shell(cmd).call()
        print(f"move to {src_dir}/gist.github.com/{user}/{description}")
    else:
        print(f.abspath + ": Already exists")

def push(filename, mode, description=""):
    gist_tool = Shell("which gist").readlines()[0]
    if gist_tool == []:
        print("please install https://github.com/defunkt/gist")
        exit()
    if mode == "secret":
        opt = "--private"
    elif mode == "public":
        opt = "--no-private"
    if description != "":
        description = f"-d '{description}'"
    Shell(f"gist {opt} {description} {filename}").call()

if args.clone:
    clone(args.clone, user)
    exit()

if args.dgrep:
    push_description = args.dgrep
else:
    push_description = ""

if args.push_public:
    push(args.push_public, "public", push_description);
    exit()

if args.push_secret:
    push(args.push_secret, "secret", push_description);
    exit()

if args.dgrep:
    re_dgrep = re.compile(args.dgrep)

if args.fgrep:
    re_fgrep = re.compile(args.fgrep)

res = requests.get("https://api.github.com/gists", auth=(user, token))
gists = res.json()
for gist in gists:
    public = gist["public"]
    if args.public:
        if not public:
            continue
    elif args.secret:
        if public:
            continue
    description = gist["description"]
    filenames = gist["files"].keys()
    url = gist["url"]
    if args.dgrep:
        if re_dgrep.search(description):
            print_gist(public, description, filenames, url, user)
            continue
    if args.fgrep:
        for filename in filenames:
            if not re_fgrep.search(filename):
                continue
            else:
                print_gist(public, description, filenames, url, user)
                break
        continue
    if not(args.dgrep) and not(args.fgrep):
        print_gist(public, description, filenames, url, user)
